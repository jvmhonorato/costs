Aula 02: Introdução ao React.

Aula 03: Aprendendo JSX funções básicas.

Aula 04: Criando primeiro componente, HelloWord.js, depois criamos o componente Frase.js e importamos pra o HelloWord.js dessa forma criamos importações em serie. assim podemos importar um componente dentro de qualquer componente

Aula 05: 1: criamos o componente SayMyName.js com uma função props como parâmetro, no retorno da função associamos props a name e chamamos ela no arquivo pai (App.js) aqui dentro da tag de retorno do componente. dessa fomra o componete pode ser chamadao em qualquer outro componente qual ele for importado.
 2: Criamos um component Pessoa.js com 4 diferente tipos de dados com o props e importamos pra o componente pai(App.js) atribuindo valores a serem renderizados

 Aula 06: Nessa aula primeiramente alteramos estilos no index.css que é a configuração global, em seguida criamos um module.css do componente Frase.js pra mostrar que os module.css sobrepõe o arquivo global index.css em hierarquia

 Aula 07: Criamos componente List.js e adcionamos 2 <li> dentro de uma <ul> em seguida crimos um componente Item.js com um props  depois importamos pra o componete List.js e chamamos no retunr o componente atribuindo um valor a propriedade

 Aula 08: criamos props no Arquivo Item.js relacionando marca e ano de lançamento, depois importamos no List.js e atribuimos valores, também chamamos o modulo propType pra tipar a propriedae declarada como string, number bolean e etc tambem usamos o isRequired pra que a propriedade nao possa ser nula, criamos  tambem o defaultProps que serve pra tratar o component caso não houver valores atribuidos

 Aula 09: 1:Criamos o componente Evento.js nele criamos um <button> com o evento onClick pra chamr uma função quando for acionado 2: Criamos tambem o componete Form.js nele criamos um formulario com o evento onSubmit e aprendemos que sempre devemos uasr ele em, conjunto com o preventDefault

 Aula 10: Criamos um formulário mais completo no componete Form.js atribuindo propriedades todas elas envolvidas em uma tag <form> 2: importamos e craimos um state pra o nome e pra a senha em seguida chamamos o setState no evento onChange dentro do input correspndente a seu state

 Aula 11: Nessa aula criamos o componente Button.js e nele criamos uma function  apenas uma tag <button onClick={props.event}>{props,text}</button> depois importamos no componente Evento.js onde reside a função a ser chamada e no return chamamos o componente atribuindo função e texto ao button.
 O componte Button pode ser impotado pra qualquer componete e pode lhe ser atribuida qualque função, basta associala a propriedadde event.  

 Aula 12: Nessa aula criamos o componente Condicional.js e nele adicionamos um fomulário de e-mail, usamos states e funçõs pra poder armazenar o email, renderizar o e-mail e limpar o e-mail. masi instruções no arquivo Condicional.js {state ou função && (ação a ser renderizada)}

 Aula 13: Na aula 13 criamos componente OutraListas.js com a função props e a função .map() pra renderizar  a lista no html. Criamos tambem um segundo parâmetro index na função .map() e chamamos na propriedadw <p key={index}> na tag <p>, em seguida tambem criamos uma condicional ternaria caso não haja itens no array ele mandar uma mensagem ou renderizar a lista.  

 Aula 14: Na aula 14 criamos o cmponente SeuNome.js com o evento onChange no input passando atravez de props o sn que por sua vez foi vinculado ao setName pra poder pegar o valor digitado, depois crimaos o componente Saudacao.js pra poder retorna tambem atravez de props o name que é a leitura do state obtido do setName que nada masi é que o valor digitado no input

 Aula 15: 1:Na aula 15 apagamos todo o conteúdo das aulas anteriores pra executar as rotas em React começando instalando o pacote "npm install react-router-dom" e importando pra o App.js 2: Em seguida criamos uma no Return um mix de tags router, link e ul pra traçar a rota. criando as rotas depois criamos uma pasta em src chamada pages nela colocamos os componentes da pagina da aplicação Home.js,contato.js e Empresa.js depois de importarmos pra App.js criamos o modulo <Routes> dentro de <Router> e traçamos as rotas com <Route path="/ element={<Home>}/>">. 3: Depois criamos o componente Navbar OBS(importa modulo de link dentro do componente navBAr) recortamos todo o corpo da tag <ul> com <li> e Link dentro dela, colamos em navBar e depois importamos de volta pra o return de App.js 4:  Criamos uma pasta layout dentro de component e dentro dela cruiamos o componete Footer.js ne teemos o conteúdo do Rodapé que iremos adcionar depois de <Routes> dessa forma todas as páginas da aplicação carregarão o mesmo rodapé 5: Por ultimo criamos Navbar.module.css na pasta layout pra alterar o estilo do Navbar

 Aula 16:Começamos instalando o pacote "npm install react-icons" 
com o pacote instalado importamos no Componente Foote.js 
2: criamos uma <ul> com <li> dentro dela chamando os icons depois disso criamos um Footer.module.css pra formatar o estilo da lista de icons e por final importamos o Footer.module.css pra o compponente Footer e associamos as classes css com className nas tags <u> e <li>

Aula 17: Apresentação do curso de como será a aplicação

Aula 18: 1:começando o projeto costs instalamos modulos:
NPM INSTALL JSON-SERVER REACT-ICONS REACT-ROUTER-DOM UUID
2: depois apagamos arquivos desnecessarios:
setupTest.js, reportWebVitals.js, logo.svg, app.test.js e app.css
3: depois configuramos estilos básicos da aplicação no index.css.
4: EM seguida compiamos o link da font 'Open sans' no google fonts e colamos em index.html em baixo do <title> na pasta public
5: puxamos 3 arquivos 2 svg e 1 png do repositorio, criamos ums pasta img em src e jogamos as imagens dentro
6: E por ultimo baixamos o ico do repositorio e substituimos pelo favicon.ico original da pasta public.

Aula 19:1:importamos em app.js o modulo BrowserRouter, 2:depois criamos as rotas das páginas, 3:em seguida criamos a pasta pages e inserimos os arquivos componentes Home.js Contact.js Company.js NewProject.js dentro dela, 4: importamos o modulo Link e associamos os links as rotas 5:criamos dentro de components uma pasta layouts e dentro dela Container.js, EM Container.js usamos um {props.chidren} e depois importamos Container.js no App.js e envolvemos a o compente routes com o container <Container><Routes></Routes></Container> 6: criamos Container.module.css pra dimencionar o container passamos tambem uma customClass com o props e chamamos no App.js no <Container customClass="min-height"> pra dimencionar ele globalmente

Aula 20: criamos em layout Navbar.js, Footer.js Navbar.module.css e Footer.module.css 2: no Navba.js importamos o modulo de rotas, o modulo css, a logo 3: configuramos o Navbar.module.css e o Footer.module.css
3: criamos o Project.js  e linkamos ao projeto, Descrição do que foi feito nos seus respectivos arquivos

Aula 21: Criamos Home.module.css e configuramos o estilo da página css importamos o arquivo svg da pasta img pra  Home.js e configuramos o tamanho da img atravez do css 2: crimaos o componente LinkButton.js e LinkButton.module.css atribuimos o caminho do componene  Newproject.js ai button do componente LinkButton.js

Aula 22: Criamos o newproject.module.css pra fazer o estilo da página NewProject.js. 2: criamos uma pasata project em components e nela vamos por todos os componentes relacionado ao projeto em si, crimaos o componente ProjectForm e importamos para NewProject.js, nele criamos um <form> com <input> dentro. 

Aula 23: criamos a pasta form e nela criamos o Input.js e o Input.module.css no input.js criamos a função passando props pra as propriedades ficar dinâmica e serem chamdas em quaquer componente chamamos e subistituímos os <input> no componente ProjectForm.js,2: criamos na pasta form Select.js e Select.module.js depois de congigura os estilos importamos o select.js com as propriedaes dinâmicas com o props e no ProjectForm.js  atribuimos seus valores, 3: Criamos o Submit.js e o Submit.module.js na pasta form, passamos a propriedade text do submit atravez de props para o arquivo ProjectForm.js e nele atribuimos btntext a text atravez de props e passamos pra o compnente NewProject.js e nele atribuimos o valor final "Criar Projeto" a btntext o valor foi neto passou para o avó submitButton.js atravez de duas propriedades dinâmicas. 

Aula 24: Criamos o arquivo db.json em seguida adcionamos em packege.json a linha backend na porta 5000 no script, 2: depois da NPM RUN BACKEND no terminal, 3: crimaos categorias no arquivo db.json e as mesma aparecem no navegador na porta 5000. 3: No ProjectForm.js importamos o state e criamos um state categories.
4: criamos tambem no ProjectForm.js um fecth dentro do hook useEffect() para fazer o backend das categorias pra o option do select, 4: Em Select.js criamos um option.map

Aula 25: Importei o useNavigate  em NewProject.js e criei um hook navigate.2: criei uma função creatPost() e criei um fecth e passei o metodo post , chamei a função com uma propriedade handleSubmit={createPost} dentro de <ProjecForm/>  3: no componente ProjectForm.js passei um props na função e criei um state project e passei projectData como parâmetro DO useState() 4: crio a função submit() passo um preventDefault() e tambem um handleSubmit() que usei como parâmetro da função pai 5: criei a função handleChange() retornando o hook setProject() com o project ,target.name e target.value de parâmetro 6: Depois inserimos a prropriedade hendleONeChange={handleChange} em todos os <Input> 7: criamos  a função handleCategory() com parâmetro project, e category em seguida passamos  a propriedade handleOneChange={handleCategory} no <Select>, depois abrimos o componete Select.js e passamos a propriedade onChange={props.handleOnChange} no <select> 8: craiamos mais uma propriedade no <Select/> value={project.category ? project.categoy.id : ""} com uma condicional ternária caso selecione o valor mostrar na tela, caso não adicone deixar vazio 9: no componente Select.js passamos tambem a propriedade value={props.value || ""} no <select> 10:Em projectForm.js passamos tambem a propriedade value={project.budget} no <input> type number  e  value={project.name} no <input> type name 11: usar o: navigate('/projects') depois do .then((data)=>{console.log(data) pra dar um push e redirecionar os novos dados pra a pagina Projects

Aula 26: Criar componente Message.js Message.module.css na pasta layout, 2: criamos props type e msg e importamos o compinete Message.jj e Project.js e passamos dinamicamente a mensagem <Message msg="Mensagem"/>, 3: No arquivo message.js passamos um className global na tag <diV> 4: criamos um state visible e colocamos a tag <div> dentro do visible &&. 5: criamos o use Effect com ciclo de visibilidade e tempo usando condicionais (if) 
states, setTimout e cleartimeout.6: em Project.js importamos o  hook useLocation, encapsulamos em location  e criamos uma condicional pra associar  location.state a message

Aula 27: criamos Project.module.css 2: Em project.js adcionamos uma <div> pra envolver o conteúdo do return e adicionaos um <a href='#'> novo projeto </a> 3: Importamos o <Container/> pra o componente Project.js pra dar suporte. Em <Container customClass="start"> demos a class custom start que é o style pra deixar os itens no inicio da pagina 4: Importamos o LinkButton.js pra Project.js e substituimos o <a href> por o <LinkButton> 5: No Project.module.css criamos o css da pagina Project.js

Aula 28: Criamos os componentes ProjectCard.js e ProjectCard.module.css na pasta project 2: importamos ProjectCard.js pra Project.js, importamos useState  e useEffect e criamos um state projects e um useEffect com um fecth com o caminho dentro. 3:
Em Project.js entre <Container></Container> criams um projects.length > 0 && com as propriedades dentro pra renderizar os projetos dentro da pagina. 3: Em projectCard.js criamos uma tag <span> pra retornar o valor do orçamento
4: editamos o estilo do prjectCard.js em ProjectCard.module.js 5: importamos link em ProjectCard.js  e usamos no return <Link to='/'> pra linkar as ações do editar com,: <BsPencil/> Editar e ecluir com: <BsFillTrashFill/>Excluir

Aula 29: crimao dois componentes Loading.js e Loading.module.css, importamos Loading.svg  loading.module.css no Loading.js.
2: Importamos Loading em Project.js e criamos um state removeloading começando em false, dentro do fecth botamos um setRemoveLoading(true) em seguida adicionamos um {!removeLoading && <Loading/>} no return.3: colocamos o fecth dentro do setTimeout pra dar um atraso load de 3 segundos. 4: criamos o {removeLoading && projects.length ===0 &&(<p>Não há projetos cadastrados</p>)} pra tratar quando não houver projetos exibir uma mensagem

Aula 30: Em Project.js crimaos uma fução removeProject(id)
com um fetch dentro pra buscar e deletetar, depois criamos emProject.js na <projectCard/> uma propriedade handleRemove={removeProject}. 2: em ProjectCard.js vamos adicionar um evento onclick={remove} no <button> "excluir" e criar uma função const remove com um preventDefault retornando  o handleRemove (id) passando o ID pra o componente superior que é o Projects.js assim o projeto poderá ser excluido com um click. 3: Pra retornar mensagem que o projeto foi excluido criei um state const projectMassage começando vazio depois retornamos no fecth setProjectMessage("Projeto removido com sucessso") em seguida na <div> do componente usamos: {projectMessage && <Message type="success" msg={projectMessage} /> } pra retorna a menssagem apos excluir o projeto

Aula 31: no ProjectCard.js criamos um rota No link <Link to={`/project/${id}`}>. 2: depois criar em pages o componente Project.js  e Porject.module.css . 3: importar em App.js dentro do ortas uma nova rota: <Route exact path="/project/:id" element={<Project/>} pra encontrar o id do projeto e renderizar.4: Em project.js importamos useParams e criar  um const {id}  importamos tambem um usestate e um useeffect, criamos o useEffect com  metodo GET usando estrutura basica do fecth dentro dela adicionamos o setProject pra manipula a lógica dos dados depois demos um return <p>{project.name}</p>

Aula 32: Em project.js importamos o Loading.svg, e no return atruibuimos uma condição ternaria pra mostrar o Loading 2: ogamos o fecth dentro do setTimeout com 5000 milisegundos pra simular o carregamento. 3: importamos o container pra os arquivo Preject.js e chamamos ele para no return, dentro de <Container> criamos uma <div> com um <h1> dentro mostrando titulo e um botão pra editar o projeto.criamos um state showProjectForm e uma função tooglePojectForm pra associala ao evento onCLick do otão editar projetos atribuindo condicinal pra mudar  o rotulo do botão dependendo do seu estado e atribuindo uma condicinal tambem, pra mostrar o que será renderizado de acordo com o estado do botão tudo atribuido ao state showProjectForm .4: criando os estilos

Aula 33: Em project.js importamos o ProjectForm pra adicionar em um dos retornos da condicional  showProjectForm: <ProjectForm     handleSubmit com o  função editPost pra alterar os valores atual do projeto, btntext pra concluir a edição,  projectData com os dados do projeto.2: crimaos um fetch dentro da função editPost() com o metodo PATCH  pra mostrar os dados e atribuir novos valores com setProject. 3: Agora vamos atribuir mensagens de retorno, criamos dois states o message e o type. importamos o componente Message.js colocamos ele no return dentro de <Container/> com as propriedades type e msg OBS: adicionamos um setMessage('') no inicio da função pra resolver o bug de mostrar a mensagem só uma vez

Aula 34: Em project.js criamos uma <div> no final do <Container> dentro dela inserimos um <h3>, um <button> com uma condicional, pra esse button crimaos uma função toggleServiceForm() e um state showServiceForm.2: crimaso em baixo de <button> uma <div> com uma condicional pra o formulário de serviço, e embaixo de um <h2> serviços e em baixo dele um novo<Container/ > pra exibir os serviços.  

Aula 35: crimaos uma pasta service e dentro dela o componente ServiceForm.js e importamos e reaproveitamos os estilo de ProjectForm.module.css nele.2: em ServiceForm.js importei o Input.js e o SubmitButton.js 3: criei funções submit e handlechange pra usar na tag <form> e no <Input/>4: atribuimos props para enviar para Project.js: handleSubmit, btnText, projectData chamamos elas em <ServiceForm/> criei a função createService pra retornar no handleSubmit{} 5: preenchir a função createService().5: importamos o uuidv4 e associamos a lastService.id. Resumo nessa aula crimaos toda a logica do  createService

Aula 36: crimaos um state services em Project.js e chamamos No ultimp <Containe/> pra renderizar com uma condicinal, o no prmieor fecth usamos o setSevice([]) em baixo do setProject. 2: criams na condicional um service.map() com um && retornado um json com um novo componente <ServiceCard/> e seus respectivos props um deles com a função removeService que criamos logo em seguida,3: criei Service.Card.js dentro da pasta service, importei os stiles de ProjectCard.module.css, atribuimos props a função importamos BsFillTrashFill do pacote react criamos uma div com as props 

Aula  37: EM Service CArd.js configuramos a funnção remove com prevent Default() e o comando handleRemove. 2: Em project.js criamos  e configuramos a função removeService(id.cost) com os parametros id e cost pra serme removidos na função dentro dela passamos um fetch pra atualizar os dados no banco de dados
                    
                    